- name: Add {{ az_dev_agent_group }} group
  group:
    name: "{{ az_dev_agent_group }}"
    state: present

- name: Add the user <{{ az_dev_agent_user }}> 
  user:
    name: "{{ az_dev_agent_user }}"
    group: "{{ az_dev_agent_group }}"
    uid: "{{ az_dev_agent_uid|default(omit) }}"
    groups: "sudo"
    comment: "Azure DevOps Agent"
    shell: /bin/bash
  become: true

- name: Check if the file <svc.sh>  exists
  stat:
    path: "{{ '/'.join((az_dev_agent_folder, 'svc.sh')) }}"
  register: svc_sh
  become_user: "{{ az_dev_agent_user }}"

- name: Create directories for the user <{{ az_dev_agent_user }}>
  file:
    state: directory
    path: "{{ item }}"
    owner: "{{ az_dev_agent_user }}"
    group: "{{ az_dev_agent_group }}"
    mode: 1755
  loop:
    - "{{ az_dev_agent_folder }}"
    - "{{ az_devops_work_folder }}"
  become: true
  when:
    - not svc_sh.stat.exists

- name: Download vsts-agent.tar.gz file
  get_url:
    url: "{{ az_devops_default_agent_package_url }}"
    dest: /home/{{ az_dev_agent_user }}/vsts-agent-linux-x64.tar.gz
    owner: "{{ az_dev_agent_user }}"
    group: "{{ az_dev_agent_group }}"
  when:
    - not svc_sh.stat.exists

- name: Extract vsts-agent.tar.gz file
  become: true
  unarchive:
    remote_src: true
    src: /home/{{  az_dev_agent_user }}/vsts-agent-linux-x64.tar.gz
    dest: "{{ az_devops_default_agent_folder }}"
    owner: "{{ az_dev_agent_user }}"
    group: "{{ az_dev_agent_group }}"
  when:
    - not svc_sh.stat.exists

- name: Check the service <{{ az_dev_agent_user }}> status
  command: ./svc.sh status
  args:
    chdir: "{{ az_dev_agent_folder }}"
  become: true
  register: svc_status
  when: svc_sh.stat.exists

- name: Set agent config facts
  set_fact:
    service_is_installed: "{{ svc_status.stdout is defined and svc_status.stdout is not regex('not installed') }}"
    service_is_running: "{{ svc_status.stdout is defined and svc_status.stdout is regex('active \\(running\\)') }}"

- name: Stop the service <{{ az_dev_agent_user }}>
  command: ./svc.sh stop
  become: true
  args:
    chdir: "{{ az_dev_agent_folder }}"
    removes: "{{ az_dev_agent_folder }}/runsvc.sh"
  when:
    - service_is_running

- name: Uninstall the service <{{ az_dev_agent_user }}>
  command: ./svc.sh uninstall
  become: true
  args:
    chdir: "{{ az_dev_agent_folder }}"
    removes: "{{ az_dev_agent_folder }}/runsvc.sh"
  when:
    - service_is_installed

- name: Unconfigure the agent <{{ az_dev_agent_user }}>
  command: "./config.sh remove --auth PAT --token {{ az_devops_accesstoken }}"
  args:
    chdir: "{{ az_dev_agent_folder }}"
    removes: "{{ az_dev_agent_folder }}/.agent"
  become_user: "{{ az_dev_agent_user }}"
  when:
    - svc_sh.stat.exists

- name: configuring the agent <{{ az_dev_agent_user }}>
  become_user: "{{ az_dev_agent_user }}"
  command:
    chdir: "{{ az_dev_agent_folder }}"
    cmd: |
      bash config.sh 
      --unattended 
      --acceptteeeula 
      --url '{{ az_devops_server_url }}' 
      --work '{{ az_devops_work_folder }}'
      --auth PAT
      --token '{{ az_devops_accesstoken }}'
      --agent {{ az_dev_agent_user }}
      --pool {{ az_dev_agent_pool_name }}

- name: Install the service <{{ az_dev_agent_user }}>
  command: ./svc.sh install {{ az_dev_agent_user }}
  become: true
  args:
    chdir: "{{ az_dev_agent_folder }}"

- name: Start the service <{{ az_dev_agent_user }}>
  command: ./svc.sh start
  become: true
  args:
    chdir: "{{ az_dev_agent_folder }}"
    